name: vprofile actions
on: workflow_dispatch # Trigger the workflow manually using the GitHub Actions UI

# Set environment variables
env:
  AWS_REGION: us-east-1 # AWS region where EKS and ECR are hosted
  ECR_REPOSITORY: vprofileapp # ECR repository name
  EKS_CLUSTER: thiti-vprofile-eks # EKS cluster name

jobs:
  Testing:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    steps:
      - name: Code checkout
        uses: actions/checkout@v4 # Check out the code from the repository

      - name: Maven test
        run: mvn test # Run Maven tests

      - name: Checkstyle
        run: mvn checkstyle:checkstyle # Run Maven Checkstyle plugin

      # Setup Java 11 to be the default version
      - name: Set Java 11
        uses: actions/setup-java@v3
        with:
         distribution: 'temurin' # Java distribution to use
         java-version: '11' # Java version to set up

      # Setup SonarQube scanner
      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      # Run SonarQube scan
      - name: SonarQube Scan
        run: |
          sonar-scanner \
           -Dsonar.host.url=${{ secrets.SONAR_URL }} \
           -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
           -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
           -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
           -Dsonar.sources=src/ \
           -Dsonar.junit.reportsPath=target/surefire-reports/ \
           -Dsonar.jacoco.reportsPath=target/jacoco.exec \
           -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml \
           -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

      # Check the SonarQube Quality Gate status
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5 # Timeout after 5 minutes
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }} # Optional SonarQube host URL

  BUILD_AND_PUBLISH:
    needs: Testing # This job depends on the Testing job
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4 # Check out the code from the repository

      - name: Build and Upload image to ECR
        uses: appleboy/docker-ecr-action@master # Use a pre-built action to build and push Docker images to ECR
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }} # AWS access key
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS secret key
          registry: ${{ secrets.REGISTRY }} # ECR registry URL
          repo: ${{ env.ECR_REPOSITORY }} # ECR repository name
          region: ${{ env.AWS_REGION }} # AWS region
          tags: latest,${{ github.run_number }} # Image tags
          daemon_off: false # Use the Docker daemon on the runner
          dockerfile: ./Dockerfile # Path to the Dockerfile
          context: ./ # Build context

  DeployToEKS:
    needs: BUILD_AND_PUBLISH # This job depends on the BUILD_AND_PUBLISH job
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    steps: 
      - name: Code Checkout
        uses: actions/checkout@v4 # Check out the code from the repository

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1 # Configure AWS credentials
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}} # AWS access key
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS secret key
          aws-region: ${{ env.AWS_REGION }} # AWS region

      - name: Get Kube config file
        run: aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER}} # Update kubeconfig for EKS

      - name: Print config file
        run: cat ~/.kube/config # Print the kubeconfig file (for debugging)

      - name: Create Docker Registry Secret if not exists
        run: |
          SECRET_NAME=regcred
          if kubectl get secret "$SECRET_NAME" > /dev/null 2>&1; then
            echo "Secret $SECRET_NAME already exists, skipping creation."
          else
            echo "Creating secret $SECRET_NAME."
            kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY }} --docker-username=AWS --docker-password=$(aws ecr get-login-password) # Create a Docker registry secret if it doesn't exist

      - name: Deploy Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.8 # Use a pre-built action to deploy Helm charts to EKS
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID}} # AWS access key
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # AWS secret key
          aws-region: ${{ env.AWS_REGION }} # AWS region
          cluster-name: ${{ env.EKS_CLUSTER }} # EKS cluster name
          #config-files: .github/values/dev.yaml # Optional config files for Helm
          chart-path: helm/vprofilecharts # Path to the Helm chart
          namespace: default # Kubernetes namespace
          values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }} # Override values for the Helm chart
          name: vprofile-stack # Name for the Helm release

